// Code generated by protoc-gen-go. DO NOT EDIT.
// source: changer.proto

/*
Package changer is a generated protocol buffer package.

It is generated from these files:
	changer.proto

It has these top-level messages:
	ManagersRequest
	ManagersReply
	PasswdConfig
	ChangeRequest
	ChangeReply
*/
package changer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChangeRequest_Manager int32

const (
	ChangeRequest_LASTPASS ChangeRequest_Manager = 0
)

var ChangeRequest_Manager_name = map[int32]string{
	0: "LASTPASS",
}
var ChangeRequest_Manager_value = map[string]int32{
	"LASTPASS": 0,
}

func (x ChangeRequest_Manager) String() string {
	return proto.EnumName(ChangeRequest_Manager_name, int32(x))
}
func (ChangeRequest_Manager) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ManagersRequest struct {
}

func (m *ManagersRequest) Reset()                    { *m = ManagersRequest{} }
func (m *ManagersRequest) String() string            { return proto.CompactTextString(m) }
func (*ManagersRequest) ProtoMessage()               {}
func (*ManagersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ManagersReply struct {
	Managers []string `protobuf:"bytes,1,rep,name=managers" json:"managers,omitempty"`
}

func (m *ManagersReply) Reset()                    { *m = ManagersReply{} }
func (m *ManagersReply) String() string            { return proto.CompactTextString(m) }
func (*ManagersReply) ProtoMessage()               {}
func (*ManagersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ManagersReply) GetManagers() []string {
	if m != nil {
		return m.Managers
	}
	return nil
}

type PasswdConfig struct {
	Length       uint32 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	Numbers      bool   `protobuf:"varint,2,opt,name=numbers" json:"numbers,omitempty"`
	SpecialChars bool   `protobuf:"varint,3,opt,name=specialChars" json:"specialChars,omitempty"`
}

func (m *PasswdConfig) Reset()                    { *m = PasswdConfig{} }
func (m *PasswdConfig) String() string            { return proto.CompactTextString(m) }
func (*PasswdConfig) ProtoMessage()               {}
func (*PasswdConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PasswdConfig) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *PasswdConfig) GetNumbers() bool {
	if m != nil {
		return m.Numbers
	}
	return false
}

func (m *PasswdConfig) GetSpecialChars() bool {
	if m != nil {
		return m.SpecialChars
	}
	return false
}

// The request message containing the user's name.
type ChangeRequest struct {
	Manager      ChangeRequest_Manager `protobuf:"varint,1,opt,name=manager,enum=changer.ChangeRequest_Manager" json:"manager,omitempty"`
	Email        string                `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password     string                `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	PasswdConfig *PasswdConfig         `protobuf:"bytes,4,opt,name=passwdConfig" json:"passwdConfig,omitempty"`
}

func (m *ChangeRequest) Reset()                    { *m = ChangeRequest{} }
func (m *ChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeRequest) ProtoMessage()               {}
func (*ChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChangeRequest) GetManager() ChangeRequest_Manager {
	if m != nil {
		return m.Manager
	}
	return ChangeRequest_LASTPASS
}

func (m *ChangeRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ChangeRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ChangeRequest) GetPasswdConfig() *PasswdConfig {
	if m != nil {
		return m.PasswdConfig
	}
	return nil
}

// The request message containing the user's name.
type ChangeReply struct {
	JobId     uint64 `protobuf:"varint,1,opt,name=jobId" json:"jobId,omitempty"`
	StartTime uint64 `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
}

func (m *ChangeReply) Reset()                    { *m = ChangeReply{} }
func (m *ChangeReply) String() string            { return proto.CompactTextString(m) }
func (*ChangeReply) ProtoMessage()               {}
func (*ChangeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChangeReply) GetJobId() uint64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *ChangeReply) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ManagersRequest)(nil), "changer.ManagersRequest")
	proto.RegisterType((*ManagersReply)(nil), "changer.ManagersReply")
	proto.RegisterType((*PasswdConfig)(nil), "changer.PasswdConfig")
	proto.RegisterType((*ChangeRequest)(nil), "changer.ChangeRequest")
	proto.RegisterType((*ChangeReply)(nil), "changer.ChangeReply")
	proto.RegisterEnum("changer.ChangeRequest_Manager", ChangeRequest_Manager_name, ChangeRequest_Manager_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Changer service

type ChangerClient interface {
	// Sends a greeting
	ChangePassword(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*ChangeReply, error)
	GetManagers(ctx context.Context, in *ManagersRequest, opts ...grpc.CallOption) (*ManagersReply, error)
}

type changerClient struct {
	cc *grpc.ClientConn
}

func NewChangerClient(cc *grpc.ClientConn) ChangerClient {
	return &changerClient{cc}
}

func (c *changerClient) ChangePassword(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*ChangeReply, error) {
	out := new(ChangeReply)
	err := grpc.Invoke(ctx, "/changer.Changer/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changerClient) GetManagers(ctx context.Context, in *ManagersRequest, opts ...grpc.CallOption) (*ManagersReply, error) {
	out := new(ManagersReply)
	err := grpc.Invoke(ctx, "/changer.Changer/GetManagers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Changer service

type ChangerServer interface {
	// Sends a greeting
	ChangePassword(context.Context, *ChangeRequest) (*ChangeReply, error)
	GetManagers(context.Context, *ManagersRequest) (*ManagersReply, error)
}

func RegisterChangerServer(s *grpc.Server, srv ChangerServer) {
	s.RegisterService(&_Changer_serviceDesc, srv)
}

func _Changer_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/changer.Changer/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangerServer).ChangePassword(ctx, req.(*ChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Changer_GetManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangerServer).GetManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/changer.Changer/GetManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangerServer).GetManagers(ctx, req.(*ManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Changer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "changer.Changer",
	HandlerType: (*ChangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangePassword",
			Handler:    _Changer_ChangePassword_Handler,
		},
		{
			MethodName: "GetManagers",
			Handler:    _Changer_GetManagers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "changer.proto",
}

func init() { proto.RegisterFile("changer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xd1, 0x8e, 0x93, 0x40,
	0x18, 0x85, 0x77, 0xdc, 0xee, 0x52, 0xfe, 0xc2, 0xaa, 0x93, 0x5a, 0x49, 0x63, 0x0c, 0x99, 0x0b,
	0x43, 0x62, 0xc2, 0x45, 0xbd, 0x59, 0xef, 0x64, 0x7b, 0x61, 0x4c, 0x34, 0x21, 0xd3, 0xbe, 0xc0,
	0x50, 0x46, 0xc0, 0x30, 0x0c, 0x0e, 0x34, 0x4d, 0x5f, 0xc2, 0x57, 0xf3, 0x95, 0x0c, 0xc3, 0x40,
	0x5b, 0xb7, 0x77, 0x9c, 0x33, 0x27, 0xff, 0x7c, 0xe7, 0x67, 0xc0, 0xdd, 0xe5, 0xac, 0xca, 0xb8,
	0x0a, 0x6b, 0x25, 0x5b, 0x89, 0x2d, 0x23, 0xc9, 0x6b, 0x78, 0xf9, 0x83, 0x55, 0x2c, 0xe3, 0xaa,
	0xa1, 0xfc, 0xf7, 0x9e, 0x37, 0x2d, 0xf9, 0x08, 0xee, 0xc9, 0xaa, 0xcb, 0x23, 0x5e, 0xc2, 0x54,
	0x18, 0xc3, 0x43, 0xfe, 0x6d, 0x60, 0xd3, 0x51, 0x93, 0x14, 0x9c, 0x98, 0x35, 0xcd, 0x21, 0x5d,
	0xcb, 0xea, 0x67, 0x91, 0xe1, 0x05, 0xdc, 0x97, 0xbc, 0xca, 0xda, 0xdc, 0x43, 0x3e, 0x0a, 0x5c,
	0x6a, 0x14, 0xf6, 0xc0, 0xaa, 0xf6, 0x22, 0xe9, 0x46, 0xbc, 0xf0, 0x51, 0x30, 0xa5, 0x83, 0xc4,
	0x04, 0x9c, 0xa6, 0xe6, 0xbb, 0x82, 0x95, 0xeb, 0x9c, 0xa9, 0xc6, 0xbb, 0xd5, 0xc7, 0x17, 0x1e,
	0xf9, 0x8b, 0xc0, 0x5d, 0x6b, 0x62, 0x03, 0x89, 0x1f, 0xc1, 0x32, 0x0c, 0xfa, 0xa2, 0x87, 0xd5,
	0xfb, 0x70, 0x68, 0x78, 0x11, 0x0c, 0x4d, 0x15, 0x3a, 0xc4, 0xf1, 0x1c, 0xee, 0xb8, 0x60, 0x45,
	0xa9, 0x39, 0x6c, 0xda, 0x8b, 0xae, 0x63, 0xdd, 0xf5, 0x90, 0x2a, 0xd5, 0x04, 0x36, 0x1d, 0x35,
	0xfe, 0x0c, 0x4e, 0x7d, 0xd6, 0xd1, 0x9b, 0xf8, 0x28, 0x98, 0xad, 0xde, 0x8c, 0x17, 0x9e, 0x2f,
	0x80, 0x5e, 0x44, 0xc9, 0x5b, 0xb0, 0x0c, 0x00, 0x76, 0x60, 0xfa, 0x3d, 0xda, 0x6c, 0xe3, 0x68,
	0xb3, 0x79, 0x75, 0x43, 0x22, 0x98, 0x0d, 0x9c, 0xdd, 0x8a, 0xe7, 0x70, 0xf7, 0x4b, 0x26, 0xdf,
	0x52, 0x5d, 0x66, 0x42, 0x7b, 0x81, 0xdf, 0x81, 0xdd, 0xb4, 0x4c, 0xb5, 0xdb, 0x42, 0x70, 0x8d,
	0x3b, 0xa1, 0x27, 0x63, 0xf5, 0x07, 0x81, 0xd5, 0xcf, 0x50, 0xf8, 0x0b, 0x3c, 0xf4, 0x9f, 0xf1,
	0x00, 0xbd, 0xb8, 0xbe, 0x8f, 0xe5, 0xfc, 0x99, 0x5f, 0x97, 0x47, 0x72, 0x83, 0x23, 0x98, 0x7d,
	0xe5, 0xed, 0xf0, 0xe3, 0xb1, 0x37, 0xc6, 0xfe, 0x7b, 0x1e, 0xcb, 0xc5, 0x95, 0x13, 0x3d, 0xe2,
	0xe9, 0x11, 0x3e, 0xec, 0xa4, 0x08, 0xb3, 0xa2, 0xcd, 0xf7, 0x49, 0x78, 0xc8, 0x8b, 0x92, 0x97,
	0x52, 0xd6, 0xa1, 0xe2, 0x82, 0x0b, 0x9e, 0x70, 0x25, 0x78, 0xff, 0xfc, 0x9e, 0x1c, 0xc3, 0x1d,
	0x77, 0x2a, 0x46, 0xc9, 0xbd, 0xb6, 0x3f, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x36, 0xbe,
	0xd1, 0xa6, 0x02, 0x00, 0x00,
}
